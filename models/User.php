<?php

namespace app\models;

use app\services\MailService;
use Yii;
use yii\db\ActiveRecord;
use app\models\ActivationCode;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $surname
 * @property string $name
 * @property string $email
 * @property string $password
 * @property string $auth_key
 * @property string $access_token
 * @property bool $is_activated
 */
class User extends ActiveRecord implements \yii\web\IdentityInterface
{

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['email', 'password'], 'required'],
            ['email', 'filter', 'filter' => 'strtolower'],
            ['email', 'email'],
            ['email', 'unique'],
            [['surname', 'name', 'password'], 'string', 'min' => 2, 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'surname' => 'Фамилия',
            'name' => 'Имя',
            'email' => 'Е-mail',
            'password' => 'Пароль'
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    /**
     * Searches for User with recieved E-mail
     * @return User
     */
    public static function findByEmail($email)
    {
        return static::findOne(['email' => $email]);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->auth_key === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    /**
     * Returns Activation_code by user_id.
     * @return \yii\db\ActiveQuery
     */
    public function getActivationCode()
    {
        return $this->hasOne(ActivationCode::class, ['user_id' => 'id']);
    }

    /**
     * if User inserted
     * then creates and sends
     * activation_code for his profile
     * if changed User is_activated attribute to true value
     * then deletes users activation_code
     * it also could be realized by using scenario but this way looks more universal
     */
    public function afterSave($insert, $changedAttributes)
    {
        if ($insert) {
            $activation_code = new ActivationCode([
                'user_id' => $this->id,
                'code' => Yii::$app->security->generateRandomString(64)
            ]);
            if ($activation_code->save()) {
                $mailService = new MailService();
                $mailService->sendActivationMessage(
                    activation_code: $activation_code->code,
                    email: $this->email,
                    surname: $this->surname,
                    name: $this->name
                );
            }
        } else if (array_key_exists('is_activated', $changedAttributes)) {
            $activation_code = $this->activationCode;
            if ($this->is_activated) {
                $activation_code->delete();
            }
        }
        parent::afterSave($insert, $changedAttributes);
    }

    /**
     * User is related with his activation_code on database level,
     * to avoid error we should delete activation_code before
     * @return bool
     */
    public function beforeDelete()
    {
        $activation_code = $this->activationCode;
        if ($activation_code) {
            $activation_code->delete();
        }
        return parent::beforeDelete();
    }

    /**
     * After deleting current profile user can't use it
     */
    public function afterDelete()
    {
        Yii::$app->user->logout();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }
}
